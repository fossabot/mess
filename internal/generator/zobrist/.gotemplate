{{- /*
	This is a template file used for code generation with go generate.
	The notices given in the comment below only applies to the files
	generated with this template. This file can be freely edited when
	updating the code generator.
*/ -}}

// Copyright Â© 2022 Rak Laptudirm <rak@laptudirm.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT THE CONTENTS OF THIS FILE
// The source code for the generator can be found at generator/zobrist

package zobrist

// PieceSquare contains zobrist keys for each type of piece on every
// square. It can be index by PieceSquare[pieceType][pieceSquare].
var PieceSquare = [16][64]Key{ {{- range .PieceSquare }}
	{ {{ range . }}{{ printf "%0#16v" . }}, {{ end }} },{{ end }}
}

// EnPassant contains the zobrist keys for all possible en passant
// capture squares on each file. It can be indexed by EnPassant[file].
var EnPassant = [8]Key{ {{ range .EnPassant }}{{ printf "%#v" .}}, {{ end }}}

// Castling contains zobrist keys for every possible permutation of
// castling rights. It can be indexed by Castling[castlingRights].
var Castling = [16]Key{ {{ range .Castling }}{{ printf "%#v" .}}, {{ end }}}

// SideToMove represents the zobrist key for when the side to move is
// black. There is no zobrist key for when the side to move is white.
var SideToMove Key = {{ printf "%#v" .SideToMove }}
